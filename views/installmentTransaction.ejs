<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Installment Payments</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Arial', sans-serif;
            background: linear-gradient(135deg, #fff 0%, #fff 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }

        .header {
            background: linear-gradient(180deg, #3b288f 0%, #6b58bf 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }

        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
        }

        .header p {
            opacity: 0.9;
            font-size: 1.1rem;
        }

        .content {
            padding: 30px;
        }

        .user-selector {
            margin-bottom: 30px;
            text-align: center;
            display: none; /* Hidden since we get userId from header */
        }

        .user-selector input {
            padding: 12px 20px;
            border: 2px solid #ddd;
            border-radius: 8px;
            font-size: 1rem;
            margin-right: 10px;
            min-width: 200px;
        }

        .btn {
            padding: 12px 24px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1rem;
            transition: all 0.3s ease;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        }

        .loading {
            text-align: center;
            padding: 40px;
            color: #666;
        }

        .error {
            background: #fee;
            color: #c33;
            padding: 15px;
            border-radius: 8px;
            margin: 20px 0;
            border-left: 4px solid #c33;
        }

        .payment-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }

        .payment-card {
            background: white;
            border: 1px solid #e0e0e0;
            border-radius: 12px;
            padding: 25px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.08);
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .payment-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 30px rgba(0,0,0,0.15);
        }

        .payment-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(180deg, #3b288f 0%, #6b58bf 100%);
        }

        .plan-name {
            font-size: 1.4rem;
            font-weight: bold;
            color: #2c3e50;
            margin-bottom: 15px;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .payment-info {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
            margin-bottom: 20px;
        }

        .info-item {
            display: flex;
            flex-direction: column;
        }

        .info-label {
            font-size: 0.9rem;
            color: #666;
            margin-bottom: 5px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .info-value {
            font-size: 1.1rem;
            font-weight: 600;
            color: #2c3e50;
        }

        .progress-bar {
            background: #f0f0f0;
            border-radius: 10px;
            height: 8px;
            margin: 15px 0;
            overflow: hidden;
        }

        .progress-fill {
            height: 100%;
            background:linear-gradient(180deg, #3b288f 0%, #6b58bf 100%);
            border-radius: 10px;
            transition: width 0.3s ease;
        }

        .status-badge {
            display: inline-block;
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 0.85rem;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .status-completed {
            background: #d4edda;
            color: #155724;
        }

        .status-in-progress {
            background: #fff3cd;
            color: #856404;
        }

        .status-pending {
            background: #f8d7da;
            color: #721c24;
        }

        .view-more-btn {
            background: transparent;
            color: #667eea;
            border: 2px solid #667eea;
            padding: 10px 20px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 0.9rem;
            transition: all 0.3s ease;
            width: 100%;
        }

        .view-more-btn:hover {
            background: #667eea;
            color: white;
        }

        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
            backdrop-filter: blur(5px);
            animation: modalFadeIn 0.3s ease;
        }

        @keyframes modalFadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        .modal-content {
            background-color: white;
            margin: 5% auto;
            padding: 0;
            border-radius: 15px;
            width: 90%;
            max-width: 600px;
            max-height: 80vh;
            overflow-y: auto;
            animation: modalSlideIn 0.3s ease;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
        }

        @keyframes modalSlideIn {
            from { transform: translateY(-50px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }

        .modal-header {
            background: linear-gradient(180deg, #3b288f 0%, #6b58bf 100%);
            color: white;
            padding: 25px 30px;
            border-radius: 15px 15px 0 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .modal-title {
            font-size: 1.5rem;
            margin: 0;
        }

        .close {
            background: none;
            border: none;
            color: white;
            font-size: 2rem;
            cursor: pointer;
            padding: 0;
            line-height: 1;
            transition: transform 0.2s ease;
        }

        .close:hover {
            transform: scale(1.1);
        }

        .modal-body {
            padding: 30px;
        }

        .detail-section {
            margin-bottom: 25px;
        }

        .detail-title {
            font-size: 1.2rem;
            font-weight: bold;
            color: #2c3e50;
            margin-bottom: 15px;
            border-bottom: 2px solid #667eea;
            padding-bottom: 5px;
        }

        .detail-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
        }

        .payment-history {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 20px;
            margin-top: 20px;
        }

        .history-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px 0;
            border-bottom: 1px solid #e0e0e0;
        }

        .history-item:last-child {
            border-bottom: none;
        }

        .history-date {
            font-weight: 600;
            color: #2c3e50;
        }

        .history-amount {
            font-weight: bold;
            color: #27ae60;
        }

        .no-payments {
            text-align: center;
            color: #666;
            font-style: italic;
            padding: 40px;
        }

        @media (max-width: 768px) {
            .payment-grid {
                grid-template-columns: 1fr;
            }
            
            .payment-info {
                grid-template-columns: 1fr;
            }
            
            .modal-content {
                margin: 10% auto;
                width: 95%;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1> My Installment Payments</h1>
            <p>Track your payment progress and view detailed history</p>
        </div>
        
        <div class="content">
            <div id="loadingDiv" class="loading">
                <p>‚è≥ Loading your payment details...</p>
            </div>
            
            <div id="errorDiv" class="error" style="display: none;"></div>
            
            <div id="paymentsContainer"></div>
        </div>
    </div>

    <!-- Modal for detailed view -->
    <div id="paymentModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title" id="modalTitle">Payment Details</h2>
                <button class="close" onclick="closeModal()">&times;</button>
            </div>
            <div class="modal-body" id="modalBody">
                <!-- Content will be populated by JavaScript -->
            </div>
        </div>
    </div>

    <script>
        // Global variables
        let currentUserId = null;
        
        // API base URL - using relative URL since we're on the same server
        const API_BASE_URL = '/api';
        
        // Get authentication token from localStorage or sessionStorage
        // function getAuthToken() {
        //     return localStorage.getItem('authToken') || 
        //            localStorage.getItem('token') || 
        //            sessionStorage.getItem('authToken') || 
        //            sessionStorage.getItem('token');
        // }
        
        // Make authenticated API request
        async function makeAuthenticatedRequest(url, options = {}) {
            // const token = getAuthToken();
            
            // if (!token) {
            //     throw new Error('No authentication token found. Please login again.');
            // }
            
            const defaultOptions = {
                headers: {
                    'Content-Type': 'application/json',
                    // 'Authorization': `Bearer ${token}`
                }
            };
            
            const mergedOptions = {
                ...defaultOptions,
                ...options,
                headers: {
                    ...defaultOptions.headers,
                    ...options.headers
                }
            };
            
            return fetch(url, mergedOptions);
        }
        
        // Initialize page when DOM is loaded
        document.addEventListener('DOMContentLoaded', function() {
            // Since userId comes from the JWT token in your backend,
            // we don't need to get it client-side. The server will extract it.
            loadUserPayments();
        });
        
        // Load user payments (userId will be extracted from JWT token on server)
        async function loadUserPayments() {
            showLoading(true);
            hideError();
            
            try {
                // Note: We're using a dummy userId in the URL since your backend 
                // extracts the real userId from req.user (JWT token)
                const response = await makeAuthenticatedRequest(`${API_BASE_URL}/installment/status/me`);
                
                if (!response.ok) {
                    if (response.status === 401 || response.status === 403) {
                        throw new Error('Authentication failed. Please login again.');
                    }
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const payments = await response.json();
                displayPayments(payments);
                
            } catch (error) {
                console.error('Error loading payments:', error);
                if (error.message.includes('authentication') || error.message.includes('login')) {
                    showError('Authentication error. Please login again.');
                    // Optionally redirect to login page
                    // window.location.href = '/login';
                } else {
                    showError('Failed to load payment data. Please check your connection and try again.');
                }
            } finally {
                showLoading(false);
            }
        }
        
        // Display payments in the grid
        function displayPayments(payments) {
            const container = document.getElementById('paymentsContainer');
            
            if (!payments || payments.length === 0) {
                container.innerHTML = '<div class="no-payments">No payment records found for this user.</div>';
                return;
            }
            
            const paymentsHTML = payments.map(payment => `
                <div class="payment-card">
                    <div class="plan-name">${escapeHtml(payment.plan)}</div>
                    
                    <div class="payment-info">
                        <div class="info-item">
                            <span class="info-label">Amount Paid</span>
                            <span class="info-value">$${formatCurrency(payment.amountPaid)}</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Target Amount</span>
                            <span class="info-value">$${formatCurrency(payment.targetAmount)}</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Remaining</span>
                            <span class="info-value">$${formatCurrency(payment.remaining)}</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Status</span>
                            <span class="status-badge status-${payment.status.replace('-', '-')}">${payment.status}</span>
                        </div>
                    </div>
                    
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: ${payment.progress}"></div>
                    </div>
                    <div style="text-align: center; margin-top: 10px; font-weight: 600; color: #667eea;">
                        Progress: ${payment.progress}
                    </div>
                    
                    <div style="margin-top: 15px; font-size: 0.9rem; color: #666;">
                        Last Updated: ${formatDate(payment.lastUpdated)}
                    </div>
                    
                    <button class="view-more-btn" onclick="viewPaymentDetails('${escapeHtml(payment.plan)}')">
                        View More Details
                    </button>
                </div>
            `).join('');
            
            container.innerHTML = `<div class="payment-grid">${paymentsHTML}</div>`;
        }
        
        // View detailed payment information
        async function viewPaymentDetails(planName) {
            try {
                // Note: Using dummy userId since backend extracts real userId from JWT
                const response = await makeAuthenticatedRequest(
                    `${API_BASE_URL}/installment/history/me/${encodeURIComponent(planName)}`
                );
                
                if (!response.ok) {
                    if (response.status === 401 || response.status === 403) {
                        throw new Error('Authentication failed. Please login again.');
                    }
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const details = await response.json();
                showPaymentModal(details);
                
            } catch (error) {
                console.error('Error loading payment details:', error);
                if (error.message.includes('authentication') || error.message.includes('login')) {
                    showError('Authentication error. Please login again.');
                } else {
                    showError('Failed to load detailed payment information');
                }
            }
        }
        
        // Show payment details in modal
        function showPaymentModal(details) {
            const modal = document.getElementById('paymentModal');
            const modalTitle = document.getElementById('modalTitle');
            const modalBody = document.getElementById('modalBody');
            
            modalTitle.textContent = `${details.plan} - Payment Details`;
            
            // Parse payment history
            let paymentHistory = [];
            try {
                paymentHistory = typeof details.paymentHistory === 'string' 
                    ? JSON.parse(details.paymentHistory) 
                    : details.paymentHistory || [];
            } catch (e) {
                console.error('Error parsing payment history:', e);
                paymentHistory = [];
            }
            
            const modalContent = `
                <div class="detail-section">
                    <div class="detail-title">üìä Plan Overview</div>
                    <div class="detail-grid">
                        <div class="info-item">
                            <span class="info-label">Plan Name</span>
                            <span class="info-value">${escapeHtml(details.plan)}</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Current Status</span>
                            <span class="status-badge status-${details.status.replace('-', '-')}">${details.status}</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Total Paid</span>
                            <span class="info-value">$${formatCurrency(details.amountPaid)}</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Target Amount</span>
                            <span class="info-value">$${formatCurrency(details.targetAmount)}</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Transaction ID</span>
                            <span class="info-value">${escapeHtml(details.transactionId || 'N/A')}</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Remaining</span>
                            <span class="info-value">$${formatCurrency(details.targetAmount - details.amountPaid)}</span>
                        </div>
                    </div>
                </div>
                
                <div class="detail-section">
                    <div class="detail-title">üìã Payment History</div>
                    <div class="payment-history">
                        ${paymentHistory.length > 0 
                            ? paymentHistory.map(payment => `
                                <div class="history-item">
                                    <div>
                                        <div class="history-date">${formatDate(payment.date || payment.timestamp)}</div>
                                        <div style="font-size: 0.9rem; color: #666;">
                                            ${payment.method || 'Payment'} ${payment.reference ? `(Ref: ${payment.reference})` : ''}
                                        </div>
                                    </div>
                                    <div class="history-amount">$${formatCurrency(payment.amount)}</div>
                                </div>
                            `).join('')
                            : '<div style="text-align: center; color: #666; padding: 20px;">No payment history available</div>'
                        }
                    </div>
                </div>
            `;
            
            modalBody.innerHTML = modalContent;
            modal.style.display = 'block';
        }
        
        // Close modal
        function closeModal() {
            const modal = document.getElementById('paymentModal');
            modal.style.display = 'none';
        }
        
        // Close modal when clicking outside
        window.onclick = function(event) {
            const modal = document.getElementById('paymentModal');
            if (event.target === modal) {
                closeModal();
            }
        }
        
        // Helper functions
        function showLoading(show) {
            const loadingDiv = document.getElementById('loadingDiv');
            loadingDiv.style.display = show ? 'block' : 'none';
        }
        
        function showError(message) {
            const errorDiv = document.getElementById('errorDiv');
            errorDiv.textContent = message;
            errorDiv.style.display = 'block';
        }
        
        function hideError() {
            const errorDiv = document.getElementById('errorDiv');
            errorDiv.style.display = 'none';
        }
        
        function formatCurrency(amount) {
            return new Intl.NumberFormat('en-NG', {
                minimumFractionDigits: 2,
                maximumFractionDigits: 2
            }).format(amount || 0);
        }
        
        function formatDate(dateString) {
            if (!dateString) return 'N/A';
            try {
                return new Date(dateString).toLocaleDateString('en-NG', {
                    year: 'numeric',
                    month: 'short',
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                });
            } catch (e) {
                return dateString;
            }
        }
        
        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }
    </script>
</body>
</html>