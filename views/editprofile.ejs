<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Eternal Trading</title>
  <link rel="stylesheet" href="/main.css">
</head>
<body>
  <form>
    <div id="formMessage" class="message"></div>
    <h3>Update Profile</h3>
    <label for="userName">Username</label>
    <input type="text" class="form-control" id="userName" name="userName" placeholder="new username" value="">
    
    <label for="email">Email</label>
    <input type="text" class="form-control" id="email" name="email" placeholder="new email" value="">
    
    <label for="password">Password</label>
    <input type="password" class="form-control" id="password" name="password" placeholder="new password" value="">
    
    <button id="submitButton" class="btn btn-primary profile-button" type="button">Save Profile</button>
</form>

<script>
   const formMessage = document.querySelector('#formMessage');
  document.getElementById('submitButton').addEventListener('click', async (e) => {
      e.preventDefault();

    // reset errors
    formMessage.textContent = '';

      // Get input values
      const userName = document.getElementById('userName').value.trim();
      const email = document.getElementById('email').value.trim();
      const password = document.getElementById('password').value.trim();

      // Construct the data object with only the filled fields
      const data = {};
      if (userName) data.userName = userName;
      if (email) data.email = email;
      if (password) data.password = password;

      try {
          const res = await fetch('/api/user/update', { 
              method: 'PUT', 
              body: JSON.stringify(data),
              headers: { 'Content-Type': 'application/json' }
          });
          const responseData = await res.json();

          if (responseData.errors) {
             // alert('Sorry, cannot make changes at the moment.');
             const firstError = responseData.errors[0];
            formMessage.textContent = firstError.msg;
            formMessage.classList.add('error');
          } else if (res.ok) {
            formMessage.textContent = responseData.message
            formMessage.classList.add('success')
            setTimeout(() => window.location.href = '/dashboard', 1000)
          } else {
             // alert('Something went wrong, please try again.');
              formMessage.textContent = responseData.message || 'An error occurred. Please try again.';
            formMessage.classList.add('error');
          }
      } catch (err) {
          // console.error('Error:', err);
          // alert('An error occurred. Please try again later.');
          console.error('Network error:', err);
          formMessage.textContent = 'Network error. Please try again.';
          formMessage.classList.add('error');
      }
  });
</script>

<style>
  /* styles.css */

.message {
    padding: 10px;
    border-radius: 4px;
    margin: 10px 0;
    text-align: center;
}

.message.error {
    color: #fdd;
    background-color: red;
}

.message.success {
    color: #dfd;
    background-color: green;
}

</style>

</body>
</html>