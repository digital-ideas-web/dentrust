<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Installment Payment Admin Panel</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #fff 0%, #fff 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }

        .header {
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            padding: 30px;
            color: white;
            text-align: center;
        }

        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
            font-weight: 300;
        }

        .header p {
            opacity: 0.9;
            font-size: 1.1em;
        }

        .search-section {
            padding: 40px;
            background: #f8f9ff;
            border-bottom: 1px solid #e1e5f0;
        }

        .search-container {
            display: flex;
            gap: 15px;
            max-width: 600px;
            margin: 0 auto;
            margin-bottom: 25px;
        }

        .search-input {
            flex: 1;
            padding: 15px 20px;
            border: 2px solid #e1e5f0;
            border-radius: 12px;
            font-size: 16px;
            transition: all 0.3s ease;
            background: white;
        }

        .search-input:focus {
            outline: none;
            border-color: #4facfe;
            box-shadow: 0 0 0 3px rgba(79, 172, 254, 0.1);
            transform: translateY(-1px);
        }

        .search-btn {
            padding: 15px 30px;
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            color: white;
            border: none;
            border-radius: 12px;
            cursor: pointer;
            font-size: 16px;
            font-weight: 600;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(79, 172, 254, 0.3);
        }

        .search-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(79, 172, 254, 0.4);
        }

        .filter-section {
            max-width: 600px;
            margin: 0 auto;
            display: none;
        }

        .filter-section.show {
            display: block;
        }

        .filter-container {
            background: white;
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.08);
            border: 1px solid #e1e5f0;
        }

        .filter-header {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 15px;
            color: #4facfe;
            font-weight: 600;
        }

        .filter-options {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
        }

        .filter-chip {
            padding: 8px 16px;
            border: 2px solid #e1e5f0;
            border-radius: 20px;
            background: white;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.3s ease;
            user-select: none;
        }

        .filter-chip:hover {
            border-color: #4facfe;
            transform: translateY(-1px);
        }

        .filter-chip.active {
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            color: white;
            border-color: #4facfe;
        }

        .filter-stats {
            margin-top: 15px;
            padding-top: 15px;
            border-top: 1px solid #f0f0f0;
            font-size: 14px;
            color: #666;
        }

        .results-section {
            padding: 40px;
            min-height: 400px;
        }

        .loading {
            text-align: center;
            padding: 60px;
            color: #666;
        }

        .spinner {
            width: 40px;
            height: 40px;
            border: 4px solid #f3f3f3;
            border-top: 4px solid #4facfe;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto 20px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .no-results {
            text-align: center;
            padding: 60px;
            color: #666;
        }

        .no-results i {
            font-size: 4em;
            color: #ddd;
            margin-bottom: 20px;
        }

        .user-group {
            margin-bottom: 40px;
            background: #f8f9ff;
            border-radius: 16px;
            padding: 25px;
            border: 1px solid #e1e5f0;
        }

        .user-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 2px solid #e1e5f0;
        }

        .user-header h3 {
            color: #333;
            font-size: 1.4em;
            font-weight: 600;
        }

        .user-summary {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .progress-text {
            font-weight: 600;
            color: #4facfe;
        }

        .transactions-list {
            display: grid;
            gap: 20px;
        }

        .transaction-card {
            background: white;
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.08);
            border: 1px solid #f0f0f0;
            transition: all 0.3s ease;
        }

        .transaction-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.12);
        }

        .transaction-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            padding-bottom: 12px;
            border-bottom: 1px solid #f0f0f0;
        }

        .transaction-id {
            font-family: 'Courier New', monospace;
            background: #f8f9ff;
            padding: 6px 12px;
            border-radius: 8px;
            font-size: 14px;
            color: #4facfe;
            font-weight: 600;
        }

        .transaction-status,
        .status-badge {
            padding: 6px 16px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 600;
            text-transform: uppercase;
        }

        .status-pending {
            background: #fff3cd;
            color: #856404;
        }

        .status-verified,
        .status-confirmed {
            background: #d4edda;
            color: #155724;
        }

        .status-rejected {
            background: #f8d7da;
            color: #721c24;
        }

        .status-completed {
            background: #cce5ff;
            color: #0056b3;
        }

        .transaction-details {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
        }

        .detail-item {
            display: flex;
            flex-direction: column;
            gap: 5px;
        }

        .detail-label {
            font-size: 12px;
            color: #666;
            text-transform: uppercase;
            font-weight: 600;
            letter-spacing: 0.5px;
        }

        .detail-value {
            font-size: 16px;
            color: #333;
            font-weight: 500;
        }

        .amount-paid {
            color: #28a745;
            font-weight: 700;
            font-size: 18px;
        }

        .amount-target {
            color: #666;
        }

        .progress-bar {
            width: 100%;
            height: 8px;
            background: #f0f0f0;
            border-radius: 4px;
            overflow: hidden;
            margin-top: 8px;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #4facfe, #00f2fe);
            border-radius: 4px;
            transition: width 0.3s ease;
        }

        .action-buttons {
            display: flex;
            gap: 12px;
            justify-content: flex-end;
            margin-top: 20px;
            padding-top: 20px;
            border-top: 1px solid #f0f0f0;
        }

        .btn {
            padding: 10px 20px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 600;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .btn-verify {
            background: linear-gradient(135deg, #28a745, #20c997);
            color: white;
            box-shadow: 0 2px 10px rgba(40, 167, 69, 0.3);
        }

        .btn-verify:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 15px rgba(40, 167, 69, 0.4);
        }

        .btn-reject {
            background: linear-gradient(135deg, #dc3545, #e83e8c);
            color: white;
            box-shadow: 0 2px 10px rgba(220, 53, 69, 0.3);
        }

        .btn-reject:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 15px rgba(220, 53, 69, 0.4);
        }

        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none !important;
        }

        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 25px;
            border-radius: 8px;
            color: white;
            font-weight: 600;
            z-index: 1000;
            transform: translateX(400px);
            transition: transform 0.3s ease;
        }

        .toast.show {
            transform: translateX(0);
        }

        .toast.success {
            background: linear-gradient(135deg, #28a745, #20c997);
        }

        .toast.error {
            background: linear-gradient(135deg, #dc3545, #e83e8c);
        }

        .results-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            padding-bottom: 20px;
            border-bottom: 2px solid #f0f0f0;
        }

        .results-info h2 {
            color: #333;
            margin-bottom: 5px;
        }

        .results-summary {
            color: #666;
            font-size: 14px;
        }

        .clear-filters {
            background: #f8f9ff;
            color: #4facfe;
            border: 2px solid #4facfe;
            padding: 8px 16px;
            border-radius: 20px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .clear-filters:hover {
            background: #4facfe;
            color: white;
        }

        @media (max-width: 768px) {
            .search-container {
                flex-direction: column;
            }
            
            .transaction-details {
                grid-template-columns: 1fr;
            }
            
            .action-buttons {
                flex-direction: column;
            }

            .user-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 15px;
            }

            .filter-options {
                justify-content: center;
            }

            .results-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 15px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Payment Admin Panel</h1>
            <p>Manage and verify installment payments</p>
        </div>

        <div class="search-section">
            <div class="search-container">
                <input 
                    type="text" 
                    id="planSearch" 
                    class="search-input" 
                    placeholder="Enter plan name to search payments..."
                    autocomplete="off"
                >
                <button id="searchBtn" class="search-btn">
                    🔍 Search
                </button>
            </div>

            <div class="filter-section" id="filterSection">
                <div class="filter-container">
                    <div class="filter-header">
                        <span>🔧</span>
                        <span>Filter Transactions</span>
                    </div>
                    
                    <div class="filter-options" id="filterOptions">
                        <div class="filter-chip active" data-filter="all">
                            📋 All Transactions
                        </div>
                        <div class="filter-chip" data-filter="pending">
                            ⏳ Pending Only
                        </div>
                        <div class="filter-chip" data-filter="confirmed">
                            ✅ Confirmed Only
                        </div>
                        <div class="filter-chip" data-filter="completed">
                            🎯 Completed Only
                        </div>
                        <div class="filter-chip" data-filter="rejected">
                            ❌ Rejected Only
                        </div>
                    </div>

                    <div class="filter-stats" id="filterStats">
                        Click on filters above to refine your search results
                    </div>
                </div>
            </div>
        </div>

        <div class="results-section" id="resultsSection">
            <div class="no-results">
                <div style="font-size: 4em; margin-bottom: 20px;">📋</div>
                <h3>Enter a plan name to view payments</h3>
                <p>Use the search bar above to find payments for a specific plan</p>
            </div>
        </div>
    </div>

    <script>
        class PaymentAdmin {
            constructor() {
                this.searchInput = document.getElementById('planSearch');
                this.searchBtn = document.getElementById('searchBtn');
                this.resultsSection = document.getElementById('resultsSection');
                this.filterSection = document.getElementById('filterSection');
                this.filterOptions = document.getElementById('filterOptions');
                this.filterStats = document.getElementById('filterStats');
                
                this.allTransactions = [];
                this.currentFilter = 'all';
                this.currentPlanName = '';
                
                this.bindEvents();
            }

            bindEvents() {
                this.searchBtn.addEventListener('click', () => this.searchPayments());
                this.searchInput.addEventListener('keypress', (e) => {
                    if (e.key === 'Enter') this.searchPayments();
                });

                // Filter event listeners
                this.filterOptions.addEventListener('click', (e) => {
                    if (e.target.classList.contains('filter-chip')) {
                        this.setActiveFilter(e.target);
                        this.applyFilter(e.target.dataset.filter);
                    }
                });
            }

            setActiveFilter(activeChip) {
                // Remove active class from all chips
                this.filterOptions.querySelectorAll('.filter-chip').forEach(chip => {
                    chip.classList.remove('active');
                });
                
                // Add active class to clicked chip
                activeChip.classList.add('active');
                this.currentFilter = activeChip.dataset.filter;
            }

            applyFilter(filterType) {
                let filteredTransactions = [...this.allTransactions];
                
                if (filterType !== 'all') {
                    filteredTransactions = this.allTransactions.filter(transaction => {
                        switch (filterType) {
                            case 'pending':
                                return transaction.verified === 'pending';
                            case 'confirmed':
                                return transaction.verified === 'confirmed';
                            case 'completed':
                                return transaction.status === 'completed';
                            case 'rejected':
                                return transaction.verified === 'rejected';
                            default:
                                return true;
                        }
                    });
                }

                this.displayTransactions(filteredTransactions, this.currentPlanName, this.allTransactions.length, filterType);
                this.updateFilterStats(filterType, filteredTransactions.length, this.allTransactions.length);
            }

            updateFilterStats(filterType, filteredCount, totalCount) {
                let statsText = '';
                
                if (filterType === 'all') {
                    statsText = `Showing all ${totalCount} transaction${totalCount !== 1 ? 's' : ''}`;
                } else {
                    const filterNames = {
                        'pending': 'pending',
                        'confirmed': 'confirmed',
                        'completed': 'completed',
                        'rejected': 'rejected'
                    };
                    statsText = `Showing ${filteredCount} ${filterNames[filterType]} transaction${filteredCount !== 1 ? 's' : ''} out of ${totalCount} total`;
                }
                
                this.filterStats.textContent = statsText;
            }

            async searchPayments() {
                const planName = this.searchInput.value.trim();
                if (!planName) {
                    this.showToast('Please enter a plan name', 'error');
                    return;
                }

                this.showLoading();
                this.currentPlanName = planName;

                try {
                    // Updated API endpoint to match your actual route
                    const response = await fetch(`/api/installments/views/${encodeURIComponent(planName)}`);
                    
                    if (!response.ok) {
                        const errorData = await response.json().catch(() => ({}));
                        throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);
                    }

                    const data = await response.json();
                    
                    // Handle your actual API response structure
                    let transactions = [];
                    if (data.views && Array.isArray(data.views)) {
                        transactions = data.views;
                    }
                    
                    this.allTransactions = transactions;
                    
                    // Show filter section
                    this.filterSection.classList.add('show');
                    
                    // Reset filter to 'all' and apply
                    this.resetFilter();
                    this.applyFilter(this.currentFilter);
                    
                } catch (error) {
                    console.error('Search error:', error);
                    this.showError(`Failed to search transactions: ${error.message}`);
                    this.filterSection.classList.remove('show');
                }
            }

            resetFilter() {
                // Reset to 'all' filter
                this.filterOptions.querySelectorAll('.filter-chip').forEach(chip => {
                    chip.classList.remove('active');
                });
                this.filterOptions.querySelector('[data-filter="all"]').classList.add('active');
                this.currentFilter = 'all';
            }

            showLoading() {
                this.resultsSection.innerHTML = `
                    <div class="loading">
                        <div class="spinner"></div>
                        <h3>Searching transactions...</h3>
                        <p>Please wait while we fetch the transaction data</p>
                    </div>
                `;
                this.filterSection.classList.remove('show');
            }

            showError(message) {
                this.resultsSection.innerHTML = `
                    <div class="no-results">
                        <div style="font-size: 4em; margin-bottom: 20px; color: #dc3545;">⚠️</div>
                        <h3>Search Failed</h3>
                        <p>${message}</p>
                    </div>
                `;
                this.filterSection.classList.remove('show');
            }

            displayTransactions(transactions, planName, totalCount, filterType = 'all') {
                if (!transactions || transactions.length === 0) {
                    const filterText = filterType === 'all' ? '' : ` matching your filter criteria`;
                    this.resultsSection.innerHTML = `
                        <div class="results-header">
                            <div class="results-info">
                                <h2>Transactions for "${planName}"</h2>
                                <div class="results-summary">No transactions found${filterText}</div>
                            </div>
                            ${filterType !== 'all' ? '<button class="clear-filters" onclick="paymentAdmin.clearFilters()">Clear Filters</button>' : ''}
                        </div>
                        <div class="no-results">
                            <div style="font-size: 4em; margin-bottom: 20px;">📭</div>
                            <h3>No transactions found</h3>
                            <p>No transactions were found for plan "${planName}"${filterText}</p>
                        </div>
                    `;
                    return;
                }

                // Group transactions by user for better display
                const groupedTransactions = this.groupTransactionsByUser(transactions);
                const transactionsHtml = Object.values(groupedTransactions)
                    .map(userGroup => this.createUserTransactionGroup(userGroup))
                    .join('');

                this.resultsSection.innerHTML = `
                    <div class="results-header">
                        <div class="results-info">
                            <h2>Transactions for "${planName}"</h2>
                            <div class="results-summary">
                                ${filterType === 'all' ? 
                                    `Found ${totalCount} transaction${totalCount !== 1 ? 's' : ''} from ${Object.keys(groupedTransactions).length} user${Object.keys(groupedTransactions).length !== 1 ? 's' : ''}` :
                                    `Showing ${transactions.length} filtered transaction${transactions.length !== 1 ? 's' : ''} from ${Object.keys(groupedTransactions).length} user${Object.keys(groupedTransactions).length !== 1 ? 's' : ''}`
                                }
                            </div>
                        </div>
                        ${filterType !== 'all' ? '<button class="clear-filters" onclick="paymentAdmin.clearFilters()">Clear Filters</button>' : ''}
                    </div>
                    ${transactionsHtml}
                `;
            }

            clearFilters() {
                this.resetFilter();
                this.applyFilter('all');
            }

            groupTransactionsByUser(transactions) {
                return transactions.reduce((grouped, transaction) => {
                    const username = transaction.username;
                    if (!grouped[username]) {
                        grouped[username] = {
                            username,
                            transactions: [],
                            totalPaid: 0,
                            targetAmount: transaction.targetAmount,
                            status: transaction.status
                        };
                    }
                    grouped[username].transactions.push(transaction);
                    grouped[username].totalPaid += transaction.amountPaid;
                    
                    // Update status to completed if any transaction is completed
                    if (transaction.status === 'completed') {
                        grouped[username].status = 'completed';
                    }
                    
                    return grouped;
                }, {});
            }

            createUserTransactionGroup(userGroup) {
                const { username, transactions, totalPaid, targetAmount, status } = userGroup;
                const progress = targetAmount > 0 ? (totalPaid / targetAmount) * 100 : 0;
                
                const transactionCards = transactions
                    .map(transaction => this.createTransactionCard(transaction))
                    .join('');

                return `
                    <div class="user-group">
                        <div class="user-header">
                            <h3>${username}</h3>
                            <div class="user-summary">
                                <span class="status-badge status-${status}">${status}</span>
                                <span class="progress-text">$${this.formatAmount(totalPaid)} / $${this.formatAmount(targetAmount)}</span>
                                <div class="progress-bar">
                                    <div class="progress-fill" style="width: ${Math.min(progress, 100)}%"></div>
                                </div>
                            </div>
                        </div>
                        <div class="transactions-list">
                            ${transactionCards}
                        </div>
                    </div>
                `;
            }

            createTransactionCard(transaction) {
                const statusClass = transaction.verified === 'confirmed' ? 'verified' : 
                                 transaction.verified === 'rejected' ? 'rejected' : 'pending';
                const statusText = transaction.verified === 'confirmed' ? 'Confirmed' : 
                                 transaction.verified === 'rejected' ? 'Rejected' : 'Pending';
                
                return `
                    <div class="transaction-card">
                        <div class="transaction-header">
                            <div class="transaction-id">ID: ${transaction.transactionId}</div>
                            <div class="transaction-status status-${statusClass}">${statusText}</div>
                        </div>
                        
                        <div class="transaction-details">
                            <div class="detail-item">
                                <div class="detail-label">Amount</div>
                                <div class="detail-value amount-paid">$${this.formatAmount(transaction.amountPaid)}</div>
                            </div>
                            
                            <div class="detail-item">
                                <div class="detail-label">Date</div>
                                <div class="detail-value">${this.formatDate(transaction.date)}</div>
                            </div>
                            
                            <div class="detail-item">
                                <div class="detail-label">Status</div>
                                <div class="detail-value">
                                    <span class="status-badge status-${transaction.status}">${transaction.status}</span>
                                </div>
                            </div>
                        </div>
                        
                        ${transaction.verified === 'pending' ? `
                            <div class="action-buttons">
                                <button class="btn btn-verify" onclick="paymentAdmin.verifyTransaction('${transaction.transactionId}', this)">
                                    ✅ Confirm Payment
                                </button>
                                <button class="btn btn-reject" onclick="paymentAdmin.rejectTransaction('${transaction.transactionId}', this)">
                                    ❌ Reject Payment
                                </button>
                            </div>
                        ` : ''}
                    </div>
                `;
            }

            async verifyTransaction(transactionId, buttonElement) {
                if (!confirm('Are you sure you want to confirm this transaction?')) return;

                const card = buttonElement.closest('.transaction-card');
                const buttons = card.querySelectorAll('.btn');
                buttons.forEach(btn => btn.disabled = true);

                try {
                    // Updated API endpoint for verification
                    const response = await fetch(`/api/installments/${transactionId}/verify`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });

                    if (!response.ok) {
                        const errorData = await response.json().catch(() => ({}));
                        throw new Error(errorData.message || `HTTP ${response.status}: ${response.statusText}`);
                    }

                    this.showToast('Transaction confirmed successfully!', 'success');
                    this.updateTransactionStatus(card, 'confirmed');
                    
                    // Update the transaction in our local data
                    const transaction = this.allTransactions.find(t => t.transactionId === transactionId);
                    if (transaction) {
                        transaction.verified = 'confirmed';
                    }
                    
                } catch (error) {
                    console.error('Verify error:', error);
                    this.showToast(`Failed to confirm transaction: ${error.message}`, 'error');
                    buttons.forEach(btn => btn.disabled = false);
                }
            }

            async rejectTransaction(transactionId, buttonElement) {
                if (!confirm('Are you sure you want to reject this transaction?')) return;

                const card = buttonElement.closest('.transaction-card');
                const buttons = card.querySelectorAll('.btn');
                buttons.forEach(btn => btn.disabled = true);

                try {
                    // Updated API endpoint for rejection
                    const response = await fetch(`/api/transactions/${transactionId}/reject`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });

                    if (!response.ok) {
                        const errorData = await response.json().catch(() => ({}));
                        throw new Error(errorData.message || `HTTP ${response.status}: ${response.statusText}`);
                    }

                    this.showToast('Transaction rejected successfully!', 'success');
                    this.updateTransactionStatus(card, 'rejected');
                    
                    // Update the transaction in our local data
                    const transaction = this.allTransactions.find(t => t.transactionId === transactionId);
                    if (transaction) {
                        transaction.verified = 'rejected';
                    }
                    
                } catch (error) {
                    console.error('Reject error:', error);
                    this.showToast(`Failed to reject transaction: ${error.message}`, 'error');
                    buttons.forEach(btn => btn.disabled = false);
                }
            }

            updateTransactionStatus(card, newStatus) {
                const statusElement = card.querySelector('.transaction-status');
                statusElement.textContent = newStatus === 'confirmed' ? 'Confirmed' : 'Rejected';
                statusElement.className = `transaction-status status-${newStatus === 'confirmed' ? 'verified' : 'rejected'}`;
                
                const actionButtons = card.querySelector('.action-buttons');
                if (actionButtons) {
                    actionButtons.remove();
                }
            }

            formatAmount(amount) {
                return parseFloat(amount || 0).toLocaleString('en-US', {
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2
                });
            }

            formatDate(dateString) {
                const date = new Date(dateString);
                return date.toLocaleDateString('en-US', {
                    year: 'numeric',
                    month: 'short',
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                });
            }

            showToast(message, type = 'success') {
                // Remove existing toast if any
                const existingToast = document.querySelector('.toast');
                if (existingToast) {
                    existingToast.remove();
                }

                const toast = document.createElement('div');
                toast.className = `toast ${type}`;
                toast.textContent = message;
                document.body.appendChild(toast);

                // Trigger animation
                setTimeout(() => toast.classList.add('show'), 100);

                // Auto remove after 3 seconds
                setTimeout(() => {
                    toast.classList.remove('show');
                    setTimeout(() => toast.remove(), 300);
                }, 3000);
            }
        }

        // Initialize the application
        const paymentAdmin = new PaymentAdmin();
    </script>
</body>
</html>