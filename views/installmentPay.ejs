<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>EternalTrading</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #fff 0%, #fff 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 800px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }

        .header {
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
            color: white;
            padding: 40px;
            text-align: center;
        }

        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
            font-weight: 300;
        }

        .header p {
            opacity: 0.9;
            font-size: 1.1rem;
        }

        .form-container {
            padding: 40px;
        }

        .form-group {
            margin-bottom: 30px;
        }

        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #333;
            font-size: 1rem;
        }

        select, input[type="number"], input[type="text"] {
            width: 100%;
            padding: 15px;
            border: 2px solid #e1e5e9;
            border-radius: 10px;
            font-size: 1rem;
            transition: all 0.3s ease;
            background: #f8f9fa;
        }

        select:focus, input:focus {
            outline: none;
            border-color: #667eea;
            background: white;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.2);
        }

        .plan-info {
            background: #f8f9fa;
            border-radius: 10px;
            padding: 20px;
            margin-top: 15px;
            border-left: 4px solid #667eea;
            display: none;
        }

        .plan-info.active {
            display: block;
            animation: fadeIn 0.3s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .plan-details {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
            margin-top: 15px;
        }

        .detail-item {
            text-align: center;
            padding: 10px;
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
        }

        .detail-label {
            font-size: 0.85rem;
            color: #666;
            margin-bottom: 5px;
        }

        .detail-value {
            font-weight: bold;
            color: #333;
            font-size: 1.1rem;
        }

        .target-amount-section {
            display: none;
            margin-top: 20px;
            padding: 20px;
            background: #fff;
            border-radius: 10px;
            border: 1px solid #b3d9ff;
        }

        .target-amount-section.active {
            display: block;
            animation: slideDown 0.3s ease;
        }

        @keyframes slideDown {
            from { opacity: 0; max-height: 0; }
            to { opacity: 1; max-height: 200px; }
        }

        .checkbox-group {
            display: flex;
            align-items: center;
            margin-bottom: 15px;
        }

        .checkbox-group input[type="checkbox"] {
            width: auto;
            margin-right: 10px;
            transform: scale(1.2);
        }

        .range-display {
            font-size: 0.9rem;
            color: #666;
            margin-top: 5px;
        }

        .submit-btn {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 18px 40px;
            border: none;
            border-radius: 50px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            width: 100%;
            margin-top: 20px;
            position: relative;
            overflow: hidden;
        }

        .submit-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 10px 25px rgba(102, 126, 234, 0.3);
        }

        .submit-btn:active {
            transform: translateY(-1px);
        }

        .result-container {
            margin-top: 30px;
            padding: 25px;
            border-radius: 15px;
            display: none;
        }

        .result-success {
            background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);
            color: white;
        }

        .result-error {
            background: linear-gradient(135deg, #ff6b6b 0%, #ee5a52 100%);
            color: white;
        }

        .result-container.active {
            display: block;
            animation: bounceIn 0.5s ease;
        }

        @keyframes bounceIn {
            0% { opacity: 0; transform: scale(0.3); }
            50% { opacity: 1; transform: scale(1.05); }
            70% { transform: scale(0.9); }
            100% { opacity: 1; transform: scale(1); }
        }

        .loading {
            display: none;
            text-align: center;
            padding: 20px;
        }

        .spinner {
            border: 3px solid #f3f3f3;
            border-top: 3px solid #667eea;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            animation: spin 1s linear infinite;
            margin: 0 auto 10px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        @media (max-width: 768px) {
            .container {
                margin: 10px;
            }
            
            .header {
                padding: 30px 20px;
            }
            
            .header h1 {
                font-size: 2rem;
            }
            
            .form-container {
                padding: 30px 20px;
            }
            
            .plan-details {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>💰 Investment Plans</h1>
            <p>Choose your plan and make installment payments towards your financial goals</p>
        </div>

        <div class="form-container">
            <form id="installmentForm">


                <div class="form-group">
                    <label for="plan">Select Investment Plan</label>
                    <select id="plan" name="plan" required>
                        <option value="">-- Choose a Plan --</option>
                        <option value="PRIME">Prime Plan</option>
                        <option value="STANDARD">Standard Plan</option>
                        <option value="GOLD">Gold Plan</option>
                        <option value="PLATINUM">Platinum Plan</option>
                        <option value="INSURANCE">Insurance Plan</option>
                        <option value="RealEstate">Real Estate Plan</option>
                        <option value="MERGER">Merger Plan</option>
                        <option value="IMMIGRATION">Immigration Plan</option>
                        <option value="ETF">ETF Plan</option>
                    </select>
                    
                    <div id="planInfo" class="plan-info">
                        <h3 id="planName">Plan Details</h3>
                        <div class="plan-details">
                            <div class="detail-item">
                                <div class="detail-label">Minimum</div>
                                <div class="detail-value" id="planMin">$0</div>
                            </div>
                            <div class="detail-item">
                                <div class="detail-label">Maximum</div>
                                <div class="detail-value" id="planMax">$0</div>
                            </div>
                            <div class="detail-item">
                                <div class="detail-label">Duration</div>
                                <div class="detail-value" id="planDuration">0 months</div>
                            </div>
                            <div class="detail-item">
                                <div class="detail-label">Return Rate</div>
                                <div class="detail-value" id="planReturn">0%</div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <div class="checkbox-group">
                        <input type="checkbox" id="customTarget" name="customTarget">
                        <label for="customTarget">Set custom target amount (optional)</label>
                    </div>
                    
                    <div id="targetAmountSection" class="target-amount-section">
                        <label for="targetAmount">Target Amount</label>
                        <input type="number" id="targetAmount" name="targetAmount" placeholder="Enter your desired target amount">
                        <div class="range-display" id="rangeDisplay">Must be between plan minimum and maximum</div>
                    </div>
                </div>

                <div class="form-group">
                    <label for="amount">Payment Amount</label>
                    <input type="number" id="amount" name="amount" required placeholder="Enter payment amount" step="0.01" min="1">
                </div>

                <div class="form-group">
                    <label for="transactionId">Transaction ID</label>
                    <input type="text" id="transactionId" name="transactionId" required placeholder="Enter transaction ID">
                </div>

                <button type="submit" class="submit-btn">
                    💳 Process Payment
                </button>
            </form>

            <div class="loading" id="loading">
                <div class="spinner"></div>
                <p>Processing your payment...</p>
            </div>

            <div id="result" class="result-container">
                <h3 id="resultTitle">Payment Result</h3>
                <p id="resultMessage"></p>
                <div id="resultDetails"></div>
            </div>
        </div>
    </div>

    <script>
        // DOM elements
        const planSelect = document.getElementById('plan');
        const planInfo = document.getElementById('planInfo');
        const customTargetCheckbox = document.getElementById('customTarget');
        const targetAmountSection = document.getElementById('targetAmountSection');
        const targetAmountInput = document.getElementById('targetAmount');
        const form = document.getElementById('installmentForm');
        const loading = document.getElementById('loading');
        const result = document.getElementById('result');


        
        let planData = {};

        // Fetch the plan constants from the backend when the page loads
        async function fetchPlanData() {
            try {
                const res = await fetch('/api/planConstants');
                if (!res.ok) throw new Error("Failed to load plan data");
                planData = await res.json();
            } catch (err) {
                alert("Error fetching plan data: " + err.message);
            }
        }

        // Call on load
        window.addEventListener('DOMContentLoaded', fetchPlanData);

        planSelect.addEventListener('change', () => {
            const selected = planSelect.value;
            const config = planData[selected];

            if (config) {
                document.getElementById('planName').innerText = `${selected} Plan`;
                document.getElementById('planMin').innerText = `$${config.price.min.toLocaleString()}`;
                document.getElementById('planMax').innerText = config.price.max ? `$${config.price.max.toLocaleString()}` : 'No limit';
                document.getElementById('planDuration').innerText = `${Math.round(config.durationInMs / (1000 * 60 * 60 * 24))} days`;
                document.getElementById('planReturn').innerText = `${(config.returnRate * 100).toFixed(0)} %`;
                planInfo.style.display = 'block';

                // Update target amount validation
                updateTargetAmountValidation(config);
            } else {
                planInfo.classList.remove('active');
                targetAmountSection.classList.remove('active');
                customTargetCheckbox.checked = false;
            }
        });

        // Custom target checkbox handler
        customTargetCheckbox.addEventListener('change', function() {
            if (this.checked) {
                targetAmountSection.classList.add('active');
                targetAmountInput.required = true;
            } else {
                targetAmountSection.classList.remove('active');
                targetAmountInput.required = false;
                targetAmountInput.value = '';
            }
        });

        // Update target amount validation
        function updateTargetAmountValidation(config) {
            const rangeDisplay = document.getElementById('rangeDisplay');
            const min = config.price.min;
            const max = config.price.max;
            
            targetAmountInput.min = min;
            if (max) {
                targetAmountInput.max = max;
                rangeDisplay.textContent = `Must be between $${min.toLocaleString()} and $${max.toLocaleString()}`;
            } else {
                targetAmountInput.removeAttribute('max');
                rangeDisplay.textContent = `Must be at least $${min.toLocaleString()}`;
            }
        }

        // Form submission logic
        form.addEventListener('submit', async (e) => {
            e.preventDefault();

            // Gather form data
            const plan = planSelect.value;
            const amount = parseFloat(document.getElementById('amount').value);
            const transactionId = document.getElementById('transactionId').value;
            const useCustomTarget = customTargetCheckbox.checked;
            const targetAmount = useCustomTarget ? parseFloat(targetAmountInput.value) : null;

            // Basic validation
            if (!plan || !amount || !transactionId) {
                alert("Please fill in all required fields.");
                return;
            }

            const payload = {
                plan,
                amount,
                transactionId,
                ...(useCustomTarget && { targetAmount })
            };

            // Show loading spinner
            loading.style.display = 'block';
            result.style.display = 'none';

            try {
                const response = await fetch('/api/installment', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });

                const data = await response.json();
                loading.style.display = 'none';

                if (response.ok) {
                    result.style.display = 'block';
                    document.getElementById('resultTitle').innerText = '✅ Payment Successful';
                    document.getElementById('resultMessage').innerText = data.message || 'Your payment was processed successfully.';
                    document.getElementById('resultDetails').innerHTML = `
                        <p><strong>Plan:</strong> ${plan}</p>
                        <p><strong>Amount:</strong> $${amount}</p>
                        <p><strong>Transaction ID:</strong> ${transactionId}</p>
                    `;
                    form.reset();
                    planInfo.style.display = 'none';
                    targetAmountSection.style.display = 'none';
                } else {
                    throw new Error(data.message || 'Something went wrong');
                }

            } catch (error) {
                loading.style.display = 'none';
                result.style.display = 'block';
                document.getElementById('resultTitle').innerText = '❌ Payment Failed';
                document.getElementById('resultMessage').innerText = error.message;
                document.getElementById('resultDetails').innerHTML = '';
            }
        });


        // Show result
        function showResult(response, isSuccess) {
            const resultContainer = document.getElementById('result');
            const resultTitle = document.getElementById('resultTitle');
            const resultMessage = document.getElementById('resultMessage');
            const resultDetails = document.getElementById('resultDetails');
            
            // Set classes
            resultContainer.className = `result-container ${isSuccess ? 'result-success' : 'result-error'} active`;
            
            // Set content
            resultTitle.textContent = isSuccess ? 'Payment Successful!' : 'Payment Failed';
            resultMessage.textContent = response.message;
            
            // Add details for successful payments
            if (isSuccess && response.totalSaved !== undefined) {
                const progressPercentage = Math.round((response.totalSaved / response.target) * 100);
                const remaining = response.target - response.totalSaved;
                
                resultDetails.innerHTML = `
                    <div style="margin-top: 20px; padding-top: 20px; border-top: 1px solid rgba(255,255,255,0.3);">
                        <p><strong>Progress:</strong> ${progressPercentage}% complete</p>
                        <p><strong>Remaining:</strong> $${remaining.toLocaleString()}</p>
                        <p><strong>Status:</strong> ${response.status.toUpperCase()}</p>
                    </div>
                `;
            } else {
                resultDetails.innerHTML = '';
            }
            
            // Scroll to result
            resultContainer.scrollIntoView({ behavior: 'smooth' });
        }

    </script>
</body>
</html>