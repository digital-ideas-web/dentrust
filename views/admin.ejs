<!DOCTYPE html>
<html>

<head>
    <title>Eternal Trading</title>
    <link rel="stylesheet" type="text/css" href="http://localhost:5000/styles.css">
    <!-- Include the Socket.io client library -->
    <!--<script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.0.1/socket.io.js"></script>-->
    <script src="https://cdn.socket.io/4.7.2/socket.io.min.js" integrity="sha384-mZLF4UVrpi/QTWPA7BjNPEnkIfRFn4ZEO3Qt/HFklTJBj/gBOV8G3HcKn4NfQblz" crossorigin="anonymous"></script>
    <!-- Include the Socket.IO client library -->
    <script src="/socket.io/socket.io.js"></script>
</head>

<body>
    <!-- Admin Dashboard -->
    <div class="admin-dashboard">
        <center>
            <h1>ADMIN PAGE</h1>

            <section class="transaction-alerts">
                <div class="head" style="background-color: #3b288f; padding: 20px 20px;">
                    <span style="font-size: 30px; cursor: pointer; color: gold;" class="nav3">CONTACT CLIENT</span>
                </div>
                <br><br>

                <div class="admin-navbar">
                    <button id="all-users"><a href="/users" style="color: #ffffff;">User</a></button>
                    <button id="contact"><a href="/contact" style="color: #ffffff;">Withdrawal</a></button>
                    <button id="trans"><a href="/trans" style="color: #ffffff;">Transaction</a></button>
                    <button id="admin-user"><a href="adminSignUser" style="color: #ffffff;">Create User</a></button>
                </div>
                <br><br><br>
                <div class="head" style="background-color: #3b288f; padding: 20px 20px;">
                    <span style="font-size: 30px; cursor: pointer; color: gold;" class="nav3">WITHDRAWAL ALERTS</span>
                </div>
                <!-- Withdrawal Section -->

                    <section class="transaction-history">
                        <table id="transaction-history-table">
                            <tr>
                                <th>Amount</th>
                                <th class="transaction-id-column">Wallet Address</th>
                                <th>Action</th>
                              </tr>
                              <tbody id="withdrawal-table"></tbody>
                        </table>
                    </section>

                    <br><br><br>
                <div class="head" style="background-color: #3b288f; padding: 20px 20px;">
                    <span style="font-size: 30px; cursor: pointer; color: gold;" class="nav3">TRANSACTION HISTORY</span>
                </div>
                <section class="transaction-history">
                    <table id="transaction-history-table">
                          <tr>
                            <th class="transaction-id-column">Transaction ID</th>
                            <th>Amount</th>
                            <th>Type of Plan</th>
                            <th>Action</th>
                          </tr>
                          <tbody id="deposit-table"></tbody>
                    </table>
                </section>
            </section>
        </center>
    </div>

    <style>
        @import url('https://stackpath.bootstrapcdn.com-awesome/4.7.0/css-awesome.min.css');
        
        body{
	margin:0px;
	padding: 0px;
	background-color:whitesmoke;
	overflow: scroll;
	font-family: system-ui;
    height: 100%;
    position: relative;
}

        /* admin */
        .admin-dashboard {
            width: 80%;
            margin: 0 auto;
            padding: 20px;
            background-color: #f0f0f0;
            border: 1px solid #ccc;
            border-radius: 5px;
        }

        .transaction-alerts,
.transaction-history {
    margin-bottom: 20px;
    padding: 20px;
    background-color: #fff;
    border: 1px solid #e0e0e0;
    border-radius: 5px;
    overflow-x: auto; /* Add this line to enable horizontal scrolling */
}

/* Add or modify this within your existing style */
table#transaction-history-table {
    width: 100%; /* Set a suitable width */
    table-layout:auto; /* Prevent the table from expanding beyond its specified width */
}
        .admin-navbar {
            display: flex;
            justify-content: space-around;
            margin-bottom: 20px;
        }

        button {
            background-color: black;
            color: white;
            padding: 10px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        button:hover {
            background-color: #333;
        }

        a {
            color: #ffffff;
            text-decoration: none;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 10px;
        }

        th,
        td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }

        th {
            background-color: #f2f2f2;
        }

        .verify-button {
            background-color: #7d66e0;
            color: white;
            padding: 8px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        .verify-button:hover {
            background-color: #573fcf;
        }

        h1 {
            color: black;
            text-align: center;
        }

        .head {
            border-top-left-radius: 30px;
            border-top-right-radius: 30px;
            border-bottom-left-radius: 30px;
            border-bottom-right-radius: 30px;
        }

        /* Style for the withdrawal section */
        .withdrawal-section {
            padding: 20px;
            border: 1px solid #ccc;
            margin-top: 20px;
        }
    </style>

    <script>
        // Client-side JavaScript (AJAX) for Deposit Data
        const depositXhr = new XMLHttpRequest();
        depositXhr.open('GET', '/api/admin/getDeposit', true);

        depositXhr.onload = function() {
        if (depositXhr.status >= 200 && depositXhr.status < 400) {
            try {
            const depositResponse = JSON.parse(depositXhr.responseText);
            const depositData = depositResponse.data;
            if (Array.isArray(depositData)) {
                renderDepositData(depositData);
            } else {
                console.error('Invalid deposit response format');
            }
            } catch (error) {
            console.error('Error parsing deposit JSON:', error.message);
            }
        } else {
            console.error('Failed to fetch deposit data from the server');
        }
        };

        depositXhr.onerror = function() {
        console.error('Failed to fetch deposit data from the server');
        };

        depositXhr.send();

        function renderDepositData(depositData) {
        const depositTable = document.getElementById('deposit-table');
        depositTable.innerHTML = '';

        depositData.forEach(deposit => {
            const row = document.createElement('tr');

            const transactionIdCell = document.createElement('td');
            transactionIdCell.textContent = deposit.transactionId;

            const amountCell = document.createElement('td');
            amountCell.textContent = deposit.amount;

            const planCell = document.createElement('td');
            planCell.textContent = deposit.plan;

            const actionCell = document.createElement('td');
            const verifyButton = document.createElement('button');
            verifyButton.textContent = 'Verify Plan';
            verifyButton.classList.add('verify-button');
            verifyButton.addEventListener('click', function() {
            // Add verification logic for deposit here
            //send a POST request to /api/verifyDeposit
            fetch('/api/admin/verify-deposit', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({}),
                })
                .then(response => response.json())
                .then(data => {
                    //to handle the response data as needed
                    console.log(data);
                    alert('Payment confirmed ')
                })
                .catch(error => {
                    console.error('Error:', error);
                })
            // alert('Deposit verified for transaction ID: ' + deposit.transactionId);
            });

            actionCell.appendChild(verifyButton);

            row.appendChild(transactionIdCell);
            row.appendChild(amountCell);
            row.appendChild(planCell);
            row.appendChild(actionCell);

            depositTable.appendChild(row);
        });
        }

        // Client-side JavaScript (AJAX) for Withdrawal Data
        const withdrawalXhr = new XMLHttpRequest();
        withdrawalXhr.open('GET', '/api/withdrawal/listWithdrawal', true);

        withdrawalXhr.onload = function() {
        if (withdrawalXhr.status >= 200 && withdrawalXhr.status < 400) {
            try {
            const withdrawalResponse = JSON.parse(withdrawalXhr.responseText);
            const withdrawalData = withdrawalResponse.withdraw;
            if (Array.isArray(withdrawalData)) {
                renderWithdrawalData(withdrawalData);
            } else {
                console.error('Invalid withdrawal response format');
            }
            } catch (error) {
            console.error('Error parsing withdrawal JSON:', error.message);
            }
        } else {
            console.error('Failed to fetch withdrawal data from the server');
        }
        };

        withdrawalXhr.onerror = function() {
        console.error('Failed to fetch withdrawal data from the server');
        };

        withdrawalXhr.send();

        function renderWithdrawalData(withdrawalData) {
        const withdrawalTable = document.getElementById('withdrawal-table');
        withdrawalTable.innerHTML = '';

        withdrawalData.forEach(withdrawal => {
            const row = document.createElement('tr');

            const amountCell = document.createElement('td');
            amountCell.textContent = withdrawal.amount;

            const walletAddressCell = document.createElement('td');
            walletAddressCell.textContent = withdrawal.walletAddress;

            const actionCell = document.createElement('td');
            const verifyButton = document.createElement('button');
            verifyButton.textContent = 'Verify Withdrawal';
            verifyButton.classList.add('verify-button');
            verifyButton.addEventListener('click', function() {
            // Add verification logic for withdrawal here
            //send a POST request to /api/verifyDeposit
            fetch('/api/withdrawal/verifyWithdrawal', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({}),
                })
                .then(response => response.json())
                .then(data => {
                    //to handle the response data as needed
                    console.log(data);
                    alert('Withdrawal confirmed ')
                })
                .catch(error => {
                    console.error('Error:', error);
                })
            // alert('Withdrawal verified for transaction ID: ' + withdrawal.transactionId);
            });

            actionCell.appendChild(verifyButton);

            row.appendChild(amountCell);
            row.appendChild(walletAddressCell);
            row.appendChild(actionCell);

            withdrawalTable.appendChild(row);
        });
        }
    </script>
</body>

</html>
