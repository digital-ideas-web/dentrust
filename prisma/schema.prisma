generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int           @id @default(autoincrement())
  createdAt            DateTime      @default(now())
  updateAt             DateTime      @updatedAt
  fullName             String
  userName             String        @unique
  email                String        @unique
  password             String
  role                 Roles         @default(USER)
  isActive             Boolean       @default(true)
  passwordUpdatedCount Int           @default(0)
  Deposit              Deposit[]
  Installment          Installment[]
  UserPlan             UserPlan[]
  Withdrawal           Withdrawal[]
}

model Deposit {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now()) @db.Date
  amount        Int
  userId        Int
  transactionId String   @unique
  isVerified    Boolean
  plan          String
  isUpdated     Boolean  @default(false)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Withdrawal {
  id            Int     @id @default(autoincrement())
  walletAddress String
  amount        Int     @default(0)
  batch_id      String  @default("abcd")
  isVerified    Boolean
  userId        Int
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Installment {
  id             Int      @id @default(autoincrement())
  userId         Int
  user           User     @relation(fields: [userId], references: [id])
  plan           String
  amountPaid     Float    @default(0)
  targetAmount   Float
  transactionId  String   @unique
  status         String
  paymentHistory Json? // Store array of payments like [{ amount, date }]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([userId, plan, status])
}

model UserPlan {
  id        Int      @id @default(autoincrement())
  userId    Int
  plan      String
  startDate DateTime
  endDate   DateTime
  status    String
  user      User     @relation(fields: [userId], references: [id])
}

enum Roles {
  USER
  ADMIN
}
