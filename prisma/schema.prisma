generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int            @id @default(autoincrement())
  createdAt            DateTime       @default(now())
  updateAt             DateTime       @updatedAt
  fullName             String
  userName             String         @unique
  email                String         @unique
  password             String
  role                 Roles          @default(USER)
  passwordUpdatedCount Int            @default(0)
  deposit              Deposit[]
  transactions         Transactions[]
  withdrawal           Withdrawal[]
  contactInfo          ContactInfo?
  fileMetadata         FileMetadata[]
}

model Deposit {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now()) @db.Date
  amount        Int
  userId        Int
  transactionId String   @unique
  isVerified    Boolean
  plan          String
  isUpdated     Boolean  @default(false)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, plan])
}

model Withdrawal {
  id            Int     @id @default(autoincrement())
  walletAddress String
  amount        Int     @default(0)
  batch_id      String  @default("abcd")
  isVerified    Boolean
  userId        Int
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Transactions {
  id            Int      @id @default(autoincrement())
  userId        Int
  user          User     @relation(fields: [userId], references: [id])
  //plan           String
  amount        Int
  //targetAmount   Float
  transactionId String   @unique
  status        Boolean  @default(false)
  //paymentHistory Json? // Store array of payments like [{ amount, date }]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model ContactInfo {
  id          Int    @id @default(autoincrement())
  userId      Int    @unique
  phoneNumber String
  id_number   String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, phoneNumber, id_number])
}

model FileMetadata {
  id           Int // unique ID
  originalName String // original filename
  storedName   String // unique name used in /uploads
  path         String // relative or absolute path
  mimeType     String // e.g., "image/png"
  size         Int // in bytes
  uploaderId   Int // user reference
  uploadedAt   DateTime @default(now())
  user         User     @relation(fields: [uploaderId], references: [id], onDelete: Cascade)

  @@unique([uploaderId, storedName])
}

enum Roles {
  USER
  ADMIN
}
